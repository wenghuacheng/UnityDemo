//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Demo/6.通用系统演示/100.系统示例【带UI】/1.玩家系统/Actions/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Demo.Common.PlayerSysWithUI
{
    public partial class @PlayerActions: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""667167ec-a575-4abb-98d3-02ca0db94a89"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""666f185b-2c44-4e7e-9cd9-83a8d344182c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""13ff9741-9bc2-4dfa-a3fa-bb9805acbe84"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2a1a14b0-f6c3-429f-9682-4bd69d0cc7a4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9bfa3387-ab43-4f9a-9024-1ca8e17a1ced"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""25d4949d-82a6-4858-8ba7-d6020cbc07fe"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d0de8ae5-53ad-4d0f-a3c7-3a631af33e76"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Attack"",
            ""id"": ""55f66a29-f3ce-4ef0-8b5f-4964f098fc5d"",
            ""actions"": [
                {
                    ""name"": ""PlayerAttack"",
                    ""type"": ""Button"",
                    ""id"": ""feac9fab-92d4-459e-beb0-0815fe13a778"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""21b4e05b-bee9-425c-a382-357ad5d0fed5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dialogue"",
            ""id"": ""bc4b8ec7-0476-4834-8a26-2ab586e69e00"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""c2e7a7c0-03ac-4e93-9e49-48108ecd48c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""30d7fa23-eccf-4d66-8e9c-5e5f7fbc1ca8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b6062d3c-716b-41f5-96d5-ab36cba30cd5"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb41d402-38ce-4d0b-bb9a-d5ef934b1033"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Movement
            m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
            m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
            // Attack
            m_Attack = asset.FindActionMap("Attack", throwIfNotFound: true);
            m_Attack_PlayerAttack = m_Attack.FindAction("PlayerAttack", throwIfNotFound: true);
            // Dialogue
            m_Dialogue = asset.FindActionMap("Dialogue", throwIfNotFound: true);
            m_Dialogue_Interact = m_Dialogue.FindAction("Interact", throwIfNotFound: true);
            m_Dialogue_Continue = m_Dialogue.FindAction("Continue", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Movement
        private readonly InputActionMap m_Movement;
        private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
        private readonly InputAction m_Movement_Move;
        public struct MovementActions
        {
            private @PlayerActions m_Wrapper;
            public MovementActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Movement_Move;
            public InputActionMap Get() { return m_Wrapper.m_Movement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
            public void AddCallbacks(IMovementActions instance)
            {
                if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }

            private void UnregisterCallbacks(IMovementActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
            }

            public void RemoveCallbacks(IMovementActions instance)
            {
                if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMovementActions instance)
            {
                foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MovementActions @Movement => new MovementActions(this);

        // Attack
        private readonly InputActionMap m_Attack;
        private List<IAttackActions> m_AttackActionsCallbackInterfaces = new List<IAttackActions>();
        private readonly InputAction m_Attack_PlayerAttack;
        public struct AttackActions
        {
            private @PlayerActions m_Wrapper;
            public AttackActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @PlayerAttack => m_Wrapper.m_Attack_PlayerAttack;
            public InputActionMap Get() { return m_Wrapper.m_Attack; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(AttackActions set) { return set.Get(); }
            public void AddCallbacks(IAttackActions instance)
            {
                if (instance == null || m_Wrapper.m_AttackActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_AttackActionsCallbackInterfaces.Add(instance);
                @PlayerAttack.started += instance.OnPlayerAttack;
                @PlayerAttack.performed += instance.OnPlayerAttack;
                @PlayerAttack.canceled += instance.OnPlayerAttack;
            }

            private void UnregisterCallbacks(IAttackActions instance)
            {
                @PlayerAttack.started -= instance.OnPlayerAttack;
                @PlayerAttack.performed -= instance.OnPlayerAttack;
                @PlayerAttack.canceled -= instance.OnPlayerAttack;
            }

            public void RemoveCallbacks(IAttackActions instance)
            {
                if (m_Wrapper.m_AttackActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IAttackActions instance)
            {
                foreach (var item in m_Wrapper.m_AttackActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_AttackActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public AttackActions @Attack => new AttackActions(this);

        // Dialogue
        private readonly InputActionMap m_Dialogue;
        private List<IDialogueActions> m_DialogueActionsCallbackInterfaces = new List<IDialogueActions>();
        private readonly InputAction m_Dialogue_Interact;
        private readonly InputAction m_Dialogue_Continue;
        public struct DialogueActions
        {
            private @PlayerActions m_Wrapper;
            public DialogueActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_Dialogue_Interact;
            public InputAction @Continue => m_Wrapper.m_Dialogue_Continue;
            public InputActionMap Get() { return m_Wrapper.m_Dialogue; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DialogueActions set) { return set.Get(); }
            public void AddCallbacks(IDialogueActions instance)
            {
                if (instance == null || m_Wrapper.m_DialogueActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DialogueActionsCallbackInterfaces.Add(instance);
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Continue.started += instance.OnContinue;
                @Continue.performed += instance.OnContinue;
                @Continue.canceled += instance.OnContinue;
            }

            private void UnregisterCallbacks(IDialogueActions instance)
            {
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @Continue.started -= instance.OnContinue;
                @Continue.performed -= instance.OnContinue;
                @Continue.canceled -= instance.OnContinue;
            }

            public void RemoveCallbacks(IDialogueActions instance)
            {
                if (m_Wrapper.m_DialogueActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDialogueActions instance)
            {
                foreach (var item in m_Wrapper.m_DialogueActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DialogueActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DialogueActions @Dialogue => new DialogueActions(this);
        public interface IMovementActions
        {
            void OnMove(InputAction.CallbackContext context);
        }
        public interface IAttackActions
        {
            void OnPlayerAttack(InputAction.CallbackContext context);
        }
        public interface IDialogueActions
        {
            void OnInteract(InputAction.CallbackContext context);
            void OnContinue(InputAction.CallbackContext context);
        }
    }
}

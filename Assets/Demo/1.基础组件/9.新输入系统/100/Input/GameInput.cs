//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Demo/1.基础组件功能示例/9.新输入系统/2.重新绑定设置/ResetGameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Demo.Basic.InputResetDemo
{
    public partial class @GameInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ResetGameInput"",
    ""maps"": [
        {
            ""name"": ""ResetGameInput"",
            ""id"": ""d43ab5e9-fd11-4a11-992d-6535bd74c750"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""4bb82035-0186-428e-b4b5-b76b0d501f33"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WSAD"",
                    ""id"": ""28f8ec62-d26e-46dc-90d7-35e45dab601d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""03bc1f73-67bc-4515-bbb0-5c3943110521"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""423ccaa7-76b9-416c-9185-c74691332740"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""29891e63-71f4-4f4f-a6a7-11e6fc0f6c8f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""09dc96e5-b3ee-4244-a647-a4920399623e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // ResetGameInput
            m_ResetGameInput = asset.FindActionMap("ResetGameInput", throwIfNotFound: true);
            m_ResetGameInput_Move = m_ResetGameInput.FindAction("Move", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // ResetGameInput
        private readonly InputActionMap m_ResetGameInput;
        private List<IResetGameInputActions> m_ResetGameInputActionsCallbackInterfaces = new List<IResetGameInputActions>();
        private readonly InputAction m_ResetGameInput_Move;
        public struct ResetGameInputActions
        {
            private @GameInput m_Wrapper;
            public ResetGameInputActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_ResetGameInput_Move;
            public InputActionMap Get() { return m_Wrapper.m_ResetGameInput; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ResetGameInputActions set) { return set.Get(); }
            public void AddCallbacks(IResetGameInputActions instance)
            {
                if (instance == null || m_Wrapper.m_ResetGameInputActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ResetGameInputActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }

            private void UnregisterCallbacks(IResetGameInputActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
            }

            public void RemoveCallbacks(IResetGameInputActions instance)
            {
                if (m_Wrapper.m_ResetGameInputActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IResetGameInputActions instance)
            {
                foreach (var item in m_Wrapper.m_ResetGameInputActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ResetGameInputActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ResetGameInputActions @ResetGameInput => new ResetGameInputActions(this);
        public interface IResetGameInputActions
        {
            void OnMove(InputAction.CallbackContext context);
        }
    }
}
